/*
  # Metrics Setup

  1. New Trigger
    - Add trigger to handle metric creation from user accounts
    - Automatically set creation timestamp and user ID

  2. Initial Data
    - Add example metrics for sales analytics
*/

-- Function to handle metric creation
CREATE OR REPLACE FUNCTION handle_metric_creation()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  -- Set created_at if not provided
  IF NEW.created_at IS NULL THEN
    NEW.created_at := now();
  END IF;

  -- Set user_id if not provided (from auth context)
  IF NEW.user_id IS NULL THEN
    NEW.user_id := auth.uid();
  END IF;

  RETURN NEW;
END;
$$;

-- Create trigger for metric creation
CREATE TRIGGER before_metric_insert
  BEFORE INSERT ON metrics
  FOR EACH ROW
  EXECUTE FUNCTION handle_metric_creation();

-- Insert initial metrics data
INSERT INTO metrics (
  name,
  description,
  calculation_method,
  is_public,
  user_id
) VALUES 
(
  'Monthly Recurring Revenue',
  'The predictable total revenue generated by your business from all active subscriptions in a month.',
  'SUM(subscription_amount) WHERE status = ''active''',
  true,
  (SELECT id FROM users LIMIT 1)
),
(
  'Average Revenue Per User',
  'The average revenue generated per user or customer over a specific time period.',
  'total_revenue / total_users',
  true,
  (SELECT id FROM users LIMIT 1)
),
(
  'Sales Growth Rate',
  'The rate at which your company''s sales revenue is increasing or decreasing over time.',
  '((current_period_sales - previous_period_sales) / previous_period_sales) * 100',
  true,
  (SELECT id FROM users LIMIT 1)
)
ON CONFLICT (user_id, name) DO NOTHING;